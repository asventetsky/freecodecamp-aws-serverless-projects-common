on:
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      source-dir:
        required: true
        type: string
    outputs:
      lambdas-common-vars:
        description: "Constructed variable of lambda artifacts (lambda name -> lambda artifact name)"
        value: ${{ jobs.build.outputs.lambdas-common-vars }}

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      lambdas-common-vars: ${{ steps.build.outputs.lambdas-common-vars }}
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "🔧 install python 3.9"
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: "💾 fetch project dependencies"
        uses: actions/cache@v3
        with:
          key: ${{ inputs.application }}-dependencies-${{ github.run_number }}
          path: ./${{ inputs.application }}/${{ inputs.source-dir }}/venv
          fail-on-cache-miss: true

      - name: "🔍 run build"
        id: build
        run: |
          TERRAGRUNT_ENV_VARS_PATH=$3

          cd ${{ inputs.application }}/${{ inputs.source-dir }} || exit

          echo "Creating a directory for artifact."
          mkdir -p target

          LAMBDAS_SPEC=$(cat lambdas_spec.txt)

          LAMBDAS_ENV_VARS=''
          for lambda_spec in ${LAMBDAS_SPEC[@]}
          do
            # Fetch lambda name and lambda version
            LAMBDA_SPEC=($(echo "$lambda_spec" | tr "=" " "))
            LAMBDA_NAME_AND_VERSION=($(echo "${LAMBDA_SPEC[0]}" | tr ":" " "))
            LAMBDA_NAME=${LAMBDA_NAME_AND_VERSION[0]}
            LAMBDA_VERSION="${LAMBDA_NAME_AND_VERSION[1]}-local"
            echo "LAMBDA_NAME=$LAMBDA_NAME"
            echo "LAMBDA_VERSION=$LAMBDA_VERSION"

            LAMBDAS_ENV_VARS+="${LAMBDA_NAME}_version: \"${LAMBDA_VERSION}\";"

            # Fetch required lambda modules
            LAMBDA_MODULES=$(echo "${LAMBDA_SPEC[1]}" | sed 's/,/\/ /g')
            echo "LAMBDA_MODULES=$LAMBDA_MODULES"

            ARTIFACT_DIRECTORY="temp_$LAMBDA_NAME"
            echo "ARTIFACT_DIRECTORY=$ARTIFACT_DIRECTORY"

            echo "Creating temp directory '$ARTIFACT_DIRECTORY'"
            mkdir -p $ARTIFACT_DIRECTORY

            cp -r $LAMBDA_MODULES $ARTIFACT_DIRECTORY

            docker build -t "$LAMBDA_NAME:$LAMBDA_VERSION" -f "$LAMBDA_NAME/Dockerfile" --build-arg lambda_source_dir=$ARTIFACT_DIRECTORY .
            docker save "$LAMBDA_NAME:$LAMBDA_VERSION" > target/"${LAMBDA_ARTIFACT_NAME}"/"$LAMBDA_NAME:$LAMBDA_VERSION".tar

            echo "Removing artifact directory '$ARTIFACT_DIRECTORY'"
            rm -rf $ARTIFACT_DIRECTORY
          done

          echo "LAMBDAS_ENV_VARS=$LAMBDAS_ENV_VARS"
          echo "TERRAGRUNT_ENV_VARS_PATH=$TERRAGRUNT_ENV_VARS_PATH"

          LAMBDAS_ENV_VARS_ARRAY=$((echo $LAMBDAS_ENV_VARS) | tr ";" "\n")

          for i in "${LAMBDAS_ENV_VARS_ARRAY[@]}"
          do
            (echo ""; echo "$i") >> $TERRAGRUNT_ENV_VARS_PATH
          done

      - name: "💾 save lambdas docker images"
        uses: actions/cache@v3
        with:
          key: ${{ inputs.application }}-artifacts-${{ github.run_number }}
          path: ./${{ inputs.application }}/${{ inputs.source-dir }}/target
