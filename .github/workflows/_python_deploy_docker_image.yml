on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      application:
        required: true
        type: string
      source-dir:
        required: true
        type: string

jobs:
  deploy:
    name: Deploy application ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "💾 fetch environment variables file"
        uses: actions/cache@v3
        with:
          key: ${{ inputs.application }}-environment-variables-${{ github.run_number }}
          path: ./env_vars_${{ inputs.environment }}.txt
          fail-on-cache-miss: true

      - name: "💾 fetch lambdas docker images"
        uses: actions/cache@v3
        with:
          key: ${{ inputs.application }}-artifacts-${{ github.run_number }}
          path: ./${{ inputs.application }}/${{ inputs.source-dir }}/target
          fail-on-cache-miss: true

      - name: "🔧 install terraform 1.3.8"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.8

      # Very weird that `wget` command finishes with error: `Error: Process completed with exit code 4.`
      - name: "🔧 install terragrunt 0.43.2"
        run: |
          curl -LJO https://github.com/gruntwork-io/terragrunt/releases/download/v0.43.2/terragrunt_linux_amd64
          mv terragrunt_linux_amd64 terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin
          ls -l /usr/local/bin
          terragrunt --version

      - name: "📦 prepare common_vars file for terragrunt"
        run: |
          echo "Setting AWS keys."
          aws_access_key_id=$(grep -rw './env_vars_"${{ inputs.environment }}".txt' -e 'aws_region' | sed 's/aws_region_"${{ inputs.environment }}"=//g')
          echo "::add-mask::$aws_access_key_id"
          echo "AWS_ACCESS_KEY_ID=$aws_access_key_id" >> $GITHUB

          aws_secret_access_key=$(grep -rw './env_vars_"${{ inputs.environment }}".txt' -e 'aws_secret_access_key' | sed 's/aws_secret_access_key_"${{ inputs.environment }}"=//g')
          echo "::add-mask::$aws_secret_access_key"
          echo "AWS_SECRET_ACCESS_KEY=$aws_secret_access_key" >> $GITHUB_ENV

          AWS_REGION=$(grep -rw './env_vars_"${{ inputs.environment }}".txt' -e 'aws_region' | sed 's/aws_region_"${{ inputs.environment }}"=//g')
          REPOSITORY_URI=$(grep -rw './env_vars_"${{ inputs.environment }}".txt' -e 'aws_repository_uri' | sed 's/aws_repository_uri_"${{ inputs.environment }}"=//g')
          ECR_ACCOUNT=${REPOSITORY_URI%/*}

          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_ACCOUNT || exit

          LAMBDAS_SPEC=$(cat lambdas_spec.txt)

          LAMBDAS_ENV_VARS=''
          for lambda_spec in ${LAMBDAS_SPEC[@]}
          do
            # Fetch lambda name and lambda version
            LAMBDA_SPEC=($(echo "$lambda_spec" | tr "=" " "))
            LAMBDA_NAME_AND_VERSION=($(echo "${LAMBDA_SPEC[0]}" | tr ":" " "))
            LAMBDA_NAME=${LAMBDA_NAME_AND_VERSION[0]}
            LAMBDA_VERSION="${LAMBDA_NAME_AND_VERSION[1]}-local"
            echo "LAMBDA_NAME=$LAMBDA_NAME"
            echo "LAMBDA_VERSION=$LAMBDA_VERSION"

            LAMBDAS_ENV_VARS+="${LAMBDA_NAME}_version: \"${LAMBDA_VERSION}\";"

            docker load --input target/"${LAMBDA_ARTIFACT_NAME}"/"$LAMBDA_NAME:$LAMBDA_VERSION".tar
            docker tag "${LAMBDA_NAME}:${LAMBDA_VERSION}" "${REPOSITORY_URI}:${LAMBDA_NAME}_${LAMBDA_VERSION}"
            docker push "${REPOSITORY_URI}:${LAMBDA_NAME}_${LAMBDA_VERSION}"
          done

          echo "LAMBDAS_ENV_VARS=$LAMBDAS_ENV_VARS"

          LAMBDAS_ENV_VARS_ARRAY=$((echo $LAMBDAS_ENV_VARS) | tr ";" "\n")

          for i in "${LAMBDAS_ENV_VARS_ARRAY[@]}"
          do
            (echo ""; echo "$i") >> ./${{ inputs.application }}/infrastructure/environments/${{ inputs.environment }}/common_vars.yaml
          done

          echo "Content of env_vars.yaml"
          cat ./${{ inputs.application }}/infrastructure/environments/${{ inputs.environment }}/common_vars.yaml

      - name: "🔍 run terragrunt init and terragrunt apply"
        run: cd ${{ inputs.application }}/infrastructure/environments/${{ inputs.environment }} && terragrunt init --terragrunt-non-interactive && terragrunt apply -auto-approve
