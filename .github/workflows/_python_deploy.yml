on:
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      lambdas-common-vars:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  deploy:
    name: Deploy application ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: "💾 fetch lambdas artifacts"
        uses: actions/cache@v3
        with:
          key: ${{ inputs.application }}-artifacts-${{ github.run_number }}
          path: ./${{ inputs.application }}/source/target
          fail-on-cache-miss: true

      - name: "🔧 install terraform 1.3.8"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.8

      # Very weird that `wget` command finishes with error: `Error: Process completed with exit code 4.`
      - name: "🔧 install terragrunt 0.43.2"
        run: |
          curl -LJO https://github.com/gruntwork-io/terragrunt/releases/download/v0.43.2/terragrunt_linux_amd64
          mv terragrunt_linux_amd64 terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin
          ls -l /usr/local/bin
          terragrunt --version

      - name: "📦 prepare common_vars file for terragrunt"
        run: |
          (echo ""; echo "${{ inputs.lambdas-common-vars }") >> ./${{ inputs.application }}/infrastructure/environments/common_vars.yaml
          echo "Content of common_vars.yaml"
          cat ./${{ inputs.application }}/infrastructure/environments/common_vars.yaml

      - name: "🔍 run terragrunt init and terragrunt apply"
        run: cd ${{ inputs.application }}/infrastructure/environments/${{ inputs.environment }} && terragrunt init --terragrunt-non-interactive && terragrunt apply -auto-approve
